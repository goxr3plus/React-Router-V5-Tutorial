{"version":3,"sources":["components/Header.js","components/Home.js","api.js","components/FullRoster.js","components/Player.js","components/Roster.js","components/Schedule.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","react_router_dom","to","Home","PlayerAPI","players","number","name","position","all","this","get","id","find","p","FullRoster","map","key","concat","Player","props","player","parseInt","match","params","Roster","react_router","exact","path","component","Schedule","Main","App","components_Header","components_Main","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a6c61b4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// The Header creates links that can be used to navigate\r\n// between routes.\r\nconst Header = () => (\r\n  <header>\r\n    <nav>\r\n      <ul>\r\n        <li><Link to='/'>Home</Link></li>\r\n        <li><Link to='/roster'>Roster</Link></li>\r\n        <li><Link to='/schedule'>Schedule</Link></li>\r\n      </ul>\r\n    </nav>\r\n  </header>\r\n)\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Welcome to the Tornadoes Website!</h1>\r\n  </div>\r\n)\r\n\r\nexport default Home\r\n","// A simple data API that will be used to get the data for our\r\n// components. On a real website, a more robust data fetching\r\n// solution would be more appropriate.\r\nconst PlayerAPI = {\r\n  players: [\r\n    { number: 1, name: \"Ben Blocker\", position: \"G\" },\r\n    { number: 2, name: \"Dave Defender\", position: \"D\" },\r\n    { number: 3, name: \"Sam Sweeper\", position: \"D\" },\r\n    { number: 4, name: \"Matt Midfielder\", position: \"M\" },\r\n    { number: 5, name: \"William Winger\", position: \"M\" },\r\n    { number: 6, name: \"Fillipe Forward\", position: \"F\" }\r\n  ],\r\n  all: function() { return this.players},\r\n  get: function(id) {\r\n    const isPlayer = p => p.number === id\r\n    return this.players.find(isPlayer)\r\n  }\r\n}\r\n\r\nexport default PlayerAPI\r\n","import React from 'react'\r\nimport PlayerAPI from '../api'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// The FullRoster iterates over all of the players and creates\r\n// a link to their profile page.\r\nconst FullRoster = () => (\r\n  <div>\r\n    <ul>\r\n      {\r\n        PlayerAPI.all().map(p => (\r\n          <li key={p.number}>\r\n            <Link to={`/roster/${p.number}`}>{p.name}</Link>\r\n          </li>\r\n        ))\r\n      }\r\n    </ul>\r\n  </div>\r\n)\r\n\r\nexport default FullRoster\r\n","import React from 'react'\r\nimport PlayerAPI from '../api'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// The Player looks up the player using the number parsed from\r\n// the URL's pathname. If no player is found with the given\r\n// number, then a \"player not found\" message is displayed.\r\nconst Player = (props) => {\r\n  const player = PlayerAPI.get(\r\n    parseInt(props.match.params.number, 10)\r\n  )\r\n  if (!player) {\r\n    return <div>Sorry, but the player was not found</div>\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>{player.name} (#{player.number})</h1>\r\n      <h2>Position: {player.position}</h2>\r\n      <Link to='/roster'>Back</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport FullRoster from './FullRoster'\r\nimport Player from './Player'\r\n\r\n// The Roster component matches one of two different routes\r\n// depending on the full pathname\r\nconst Roster = () => (\r\n  <Switch>\r\n    <Route exact path='/roster' component={FullRoster}/>\r\n    <Route path='/roster/:number' component={Player}/>\r\n  </Switch>\r\n)\r\n\r\n\r\nexport default Roster\r\n","import React from 'react'\r\n\r\nconst Schedule = () => (\r\n  <div>\r\n    <ul>\r\n      <li>6/5 @ Evergreens</li>\r\n      <li>6/8 vs Kickers</li>\r\n      <li>6/14 @ United</li>\r\n    </ul>\r\n  </div>\r\n)\r\n\r\nexport default Schedule\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Home from './Home'\r\nimport Roster from './Roster'\r\nimport Schedule from './Schedule'\r\n\r\n// The Main component renders one of the three provided\r\n// Routes (provided that one matches). Both the /roster\r\n// and /schedule routes will match any pathname that starts\r\n// with /roster or /schedule. The / route will only match\r\n// when the pathname is exactly the string \"/\"\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route exact path='/' component={Home}/>\r\n      <Route path='/roster' component={Roster}/>\r\n      <Route path='/schedule' component={Schedule}/>\r\n    </Switch>\r\n  </main>\r\n)\r\n\r\nexport default Main\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from './components/Header'\nimport Main from './components/Main'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}